AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Video Pipeline (MediaConvert + Transcribe)

Parameters:
  ProjectName:
    Type: String
    Default: video-pipeline

Globals:
  Function:
    Runtime: python3.10
    Timeout: 60
    MemorySize: 256
  Api:
    # We create an explicit API so your web .env can keep using /Stage
    Name: !Sub "${ProjectName}-api"
    StageName: Stage
    EndpointConfiguration: REGIONAL

Resources:
  # -------------------- Storage --------------------
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-uploadsbucket-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [PUT,GET,HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
            MaxAge: 3000

  ProcessedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-processedbucket-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET,HEAD]
            AllowedOrigins: ['*']
            AllowedHeaders: ['*']
            MaxAge: 3000

  VideosTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-VideosTable"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: videoId
          AttributeType: S
      KeySchema:
        - AttributeName: videoId
          KeyType: HASH

  # -------------------- API (presigned upload URL) --------------------
  RequestUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/request_upload_url
      Handler: handler.lambda_handler
      Environment:
        Variables:
          UPLOADS_BUCKET: !Ref UploadsBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref HttpApi
            Path: /request-upload-url
            Method: POST
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub "${UploadsBucket.Arn}/*"

  HttpApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectName}-api"
      StageName: Stage
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # -------------------- Service Roles --------------------
  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-MediaConvertRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: mediaconvert.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MediaConvertS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [ "s3:GetObject", "s3:ListBucket" ]
                Resource:
                  - !Sub "${UploadsBucket.Arn}"
                  - !Sub "${UploadsBucket.Arn}/*"
              - Effect: Allow
                Action: [ "s3:PutObject", "s3:PutObjectAcl" ]
                Resource: !Sub "${ProcessedBucket.Arn}/*"

  TranscribeAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-TranscribeAccessRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: transcribe.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TranscribeS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [ "s3:GetObject", "s3:GetObjectAcl", "s3:ListBucket" ]
                Resource:
                  - !Sub "${UploadsBucket.Arn}"
                  - !Sub "${UploadsBucket.Arn}/*"
              - Effect: Allow
                Action: [ "s3:PutObject", "s3:PutObjectAcl" ]
                Resource: !Sub "${ProcessedBucket.Arn}/*"

  # -------------------- Lambda: MediaConvert (Submit + Wait) --------------------
  TranscodeSubmitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/transcode_submit
      Handler: handler.lambda_handler
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          MEDIACONVERT_ROLE_ARN: !GetAtt MediaConvertRole.Arn
          PROCESSED_BUCKET: !Ref ProcessedBucket
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - mediaconvert:CreateJob
                - mediaconvert:DescribeEndpoints
              Resource: "*"

  TranscodeWaitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/transcode_wait
      Handler: handler.lambda_handler
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - mediaconvert:GetJob
                - mediaconvert:DescribeEndpoints
              Resource: "*"

  # -------------------- Lambda: Transcribe (Start + Poll) --------------------
  TranscribeStartFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/transcribe_start
      Handler: handler.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          TRANSCRIBE_DATA_ACCESS_ROLE_ARN: !GetAtt TranscribeAccessRole.Arn
          TRANSCRIBE_LANG: en-US
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
                - transcribe:GetTranscriptionJob
              Resource: "*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt TranscribeAccessRole.Arn
              Condition:
                StringEquals:
                  iam:PassedToService: transcribe.amazonaws.com

  TranscribePollFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambdas/transcribe_poll
      Handler: handler.lambda_handler
      Timeout: 30
      Policies:
        - Statement:
            - Effect: Allow
              Action: transcribe:GetTranscriptionJob
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub "${ProcessedBucket.Arn}/*"

  # -------------------- Step Functions --------------------
  PipelineStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${ProjectName}-Pipeline"
      Definition:
        StartAt: TranscodeSubmit
        States:
          TranscodeSubmit:
            Type: Task
            Resource: !GetAtt TranscodeSubmitFunction.Arn
            Next: TranscodeWait
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.transcodeError"
                Next: FailState
          TranscodeWait:
            Type: Task
            Resource: !GetAtt TranscodeWaitFunction.Arn
            Next: TranscribeStart
            Retry:
              - ErrorEquals: ["RETRY"]
                IntervalSeconds: 10
                BackoffRate: 1.5
                MaxAttempts: 18
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.transcodeWaitError"
                Next: FailState
          TranscribeStart:
            Type: Task
            Resource: !GetAtt TranscribeStartFunction.Arn
            Next: TranscribeWait
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.transcribeStartError"
                Next: FailState
          TranscribeWait:
            Type: Task
            Resource: !GetAtt TranscribePollFunction.Arn
            End: true
            Retry:
              - ErrorEquals: ["RETRY"]
                IntervalSeconds: 10
                BackoffRate: 1.5
                MaxAttempts: 24
            Catch:
              - ErrorEquals: ["States.ALL"]
                ResultPath: "$.transcribeWaitError"
                Next: FailState
          FailState:
            Type: Fail
      Policies:
        - LambdaInvokePolicy: { FunctionName: !Ref TranscodeSubmitFunction }
        - LambdaInvokePolicy: { FunctionName: !Ref TranscodeWaitFunction }
        - LambdaInvokePolicy: { FunctionName: !Ref TranscribeStartFunction }
        - LambdaInvokePolicy: { FunctionName: !Ref TranscribePollFunction }

  # -------------------- EventBridge: start pipeline on upload --------------------
  S3ToStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-S3ToSFNRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !Ref PipelineStateMachine

  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger pipeline on new MP4 in uploads bucket
      EventPattern:
        source: [aws.s3]
        detail-type: ["Object Created"]
        detail:
          bucket:
            name: [!Ref UploadsBucket]
          object:
            key:
              - prefix: ""
              - suffix: ".mp4"
      Targets:
        - Id: StartPipeline
          Arn: !Ref PipelineStateMachine
          RoleArn: !GetAtt S3ToStepFunctionsRole.Arn
          InputTransformer:
            InputPathsMap:
              bucket: "$.detail.bucket.name"
              key: "$.detail.object.key"
            InputTemplate: >
              {"bucket": <bucket>, "key": <key>, "processedBucket": "<ProcessedBucket>"}

Outputs:
  ApiBaseUrl:
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/Stage"
  UploadsBucketName:
    Value: !Ref UploadsBucket
  ProcessedBucketName:
    Value: !Ref ProcessedBucket
  VideosTableName:
    Value: !Ref VideosTable
  StateMachineName:
    Value: !GetAtt PipelineStateMachine.Name
